import type { Express, Request, Response, NextFunction } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { configureAuth } from "./auth";
import { submissionQueue } from "./queue/worker";
import multer from "multer";
import path from "path";
import * as fs from 'fs';
import { StorageService } from "./services/storage-service";
import { AIService } from "./services/ai-service";
import { GeminiAdapter, SUPPORTED_MIME_TYPES } from "./adapters/gemini-adapter";
import { OpenAIAdapter } from "./adapters/openai-adapter";
import { z } from "zod";
import { eq, count } from "drizzle-orm";
import { db } from "./db";
import { submissions, feedback, users, userNotificationSettings, newsletterSubscribers, type User } from "@shared/schema";
import { v4 as uuidv4 } from "uuid";
import { defaultRateLimiter, submissionRateLimiter } from "./middleware/rate-limiter";
import adminRoutes from "./routes/admin";
import instructorRoutes from "./routes/instructor";
import { queueSecurityAudit } from "./queue/security-audit";
import { determineContentType, isFileTypeAllowed, ContentType } from "./utils/file-type-settings";
import { processFileForMultimodal } from "./utils/multimodal-processor";
import { asyncHandler } from "./lib/error-handler";
import { generateSecret, verifyTotp, generateOtpAuthUrl } from "./utils/totp";

// Helper function to generate a unique shareable code for assignments
function generateShareableCode(length = 8): string {
  // Generate a random UUID
  const uuid = uuidv4();

  // Convert to alphanumeric characters by removing dashes and taking first 'length' characters
  // Always use uppercase for consistency in storage
  const code = uuid.replace(/-/g, '').substring(0, length).toUpperCase();

  console.log(`Generated shareable code: ${code}`);
  return code;
}

// Configure multer for file uploads
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  }
});

export async function registerRoutes(app: Express): Promise<Server> {
  // Set up authentication
  const { requireAuth, requireRole } = configureAuth(app);

  const requireInstructor = (req: Request, res: Response, next: NextFunction) => {
    const role = (req.user as any)?.role;
    if (role !== 'instructor' && role !== 'admin') {
      return res.status(403).json({ message: 'Instructor access required' });
    }
    next();
  };

  // Initialize services
  const storageService = new StorageService();

  // Mount admin routes
  app.use('/api/admin', require('./routes/admin/index').default);

  // Mount instructor routes
  app.use('/api/instructor', instructorRoutes);

  // Define API routes
  app.get('/api/health', (req, res) => {
    res.status(200).json({ status: 'ok' });
  });

  // System settings endpoints
  app.get('/api/admin/system-settings', requireAuth, requireRole('admin'), asyncHandler(async (req: Request, res: Response) => {
    const settings = await storage.listSystemSettings();
    const result: Record<string, any> = {};
    settings.forEach(s => { result[s.key] = { value: s.value, lms: s.lms, storage: s.storage, security: s.security }; });
    res.json(result);
  }));

  app.put('/api/admin/system-settings', requireAuth, requireRole('admin'), asyncHandler(async (req: Request, res: Response) => {
    const updates = req.body as Record<string, any>;
    if (!updates || typeof updates !== 'object') {
      return res.status(400).json({ message: 'Invalid request body' });
    }
    const user = req.user as User;
    const result: Record<string, any> = {};
    for (const key of Object.keys(updates)) {
      const value = updates[key];
      const settingPayload: any = { key, value: value.value ?? value, updatedBy: user.id };
      if (value.lms !== undefined) settingPayload.lms = value.lms;
      if (value.storage !== undefined) settingPayload.storage = value.storage;
      if (value.security !== undefined) settingPayload.security = value.security;

      const setting = await storage.upsertSystemSetting(settingPayload);
      result[setting.key] = { value: setting.value, lms: setting.lms, storage: setting.storage, security: setting.security };
    }
    res.json(result);
  }));

  app.post('/api/admin/security-audit', requireAuth, requireRole('admin'), asyncHandler(async (req: Request, res: Response) => {
    const user = req.user as User;
    await queueSecurityAudit(user.id);
    res.json({ message: 'Security audit queued' });
  }));

  // Newsletter subscription
  app.post('/api/newsletter/subscribe', asyncHandler(async (req: Request, res: Response) => {
    const schema = z.object({ email: z.string().email() });
    const result = schema.safeParse(req.body);
    if (!result.success) {
      return res.status(400).json({ message: 'Invalid email address' });
    }

    const { email } = result.data;

    try {
      const existing = await db.select().from(newsletterSubscribers).where(eq(newsletterSubscribers.email, email));
      if (existing.length > 0) {
        return res.status(200).json({ message: 'Already subscribed' });
      }

      await db.insert(newsletterSubscribers).values({ email }).returning();
      return res.status(201).json({ message: 'Subscribed' });
    } catch (error) {
      console.error('Failed to subscribe to newsletter:', error);
      return res.status(500).json({ message: 'Failed to subscribe' });
    }
  }));
  // Authentication endpoints handled in auth.ts

  // Admin user management (from codex/add-admin-user-routes-and-connect-to-storage branch)
  app.get('/api/admin/users', requireAuth, requireRole('admin'), asyncHandler(async (req: Request, res: Response) => {
    const usersList = await storage.listUsers();
    res.json(usersList);
  }));

  app.post('/api/admin/users', requireAuth, requireRole('admin'), asyncHandler(async (req: Request, res: Response) => {
    const userSchema = z.object({
      name: z.string().min(1),
      username: z.string().min(3),
      email: z.string().email(),
      password: z.string().min(6).optional(),
      role: z.enum(['student', 'instructor', 'admin']).default('student'),
    });

    const result = userSchema.safeParse(req.body);
    if (!result.success) {
      return res.status(400).json({ message: 'Invalid user data', errors: result.error.format() });
    }

    const { password, ...data } = result.data;
    const newUser = await storage.createUser({ ...data, password: password ?? null });
    res.status(201).json(newUser);
  }));

  app.put('/api/admin/users/:id', requireAuth, requireRole('admin'), asyncHandler(async (req: Request, res: Response) => {
    const userId = parseInt(req.params.id);
    if (isNaN(userId)) {
      return res.status(400).json({ message: 'Invalid user ID' });
    }

    const updateSchema = z.object({
      name: z.string().optional(),
      username: z.string().optional(),
      email: z.string().email().optional(),
      password: z.string().min(6).optional(),
      role: z.enum(['student', 'instructor', 'admin']).optional(),
    });

    const result = updateSchema.safeParse(req.body);
    if (!result.success) {
      return res.status(400).json({ message: 'Invalid user data', errors: result.error.format() });
    }

    const updated = await storage.updateUser(userId, result.data);
    if (!updated) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json(updated);
  }));

  app.delete('/api/admin/users/:id', requireAuth, requireRole('admin'), asyncHandler(async (req: Request, res: Response) => {
    const userId = parseInt(req.params.id);
    if (isNaN(userId)) {
      return res.status(400).json({ message: 'Invalid user ID' });
    }

    await storage.deleteUser(userId);
    res.status(204).end();
  }));

  // User notification settings (from origin/main branch)
  app.get('/api/user/notifications', requireAuth, asyncHandler(async (req: Request, res: Response) => {
    const user = req.user as User;
    const settings = await storage.getUserNotificationSettings(user.id);
    if (!settings) {
      return res.json({
        emailNotifications: true,
        assignmentNotifications: true,
        feedbackNotifications: true,
        systemNotifications: false
      });
    }
    res.json(settings);
  }));

  app.put('/api/user/notifications', requireAuth, asyncHandler(async (req: Request, res: Response) => {
    const user = req.user as User;
    const schema = z.object({
      emailNotifications: z.boolean(),
      assignmentNotifications: z.boolean(),
      feedbackNotifications: z.boolean(),
      systemNotifications: z.boolean(),
    });

    const result = schema.safeParse(req.body);
    if (!result.success) {
      return res.status(400).json({ message: 'Invalid settings', errors: result.error.flatten() });
    }

    const settings = await storage.upsertUserNotificationSettings({
      userId: user.id,
      ...result.data,
    });

    res.json(settings);
  }));

  // MFA endpoints (from origin/main branch)
  app.get('/api/mfa/setup', requireAuth, asyncHandler(async (req: Request, res: Response) => {
    const user = req.user as any; // Assuming user object has id and username
    const secret = generateSecret();
    const url = generateOtpAuthUrl(secret, user.username); // Ensure user.username exists
    await storage.updateUserMfa(user.id, false, secret); // Make sure storage.updateUserMfa handles these params
    res.json({ secret, url });
  }));

  app.post('/api/mfa/enable', requireAuth, asyncHandler(async (req: Request, res: Response) => {
    const { token } = req.body;
    const user = await storage.getUser((req.user as any).id);
    if (!user || !user.mfaSecret) {
      return res.status(400).json({ message: 'MFA not initialized' });
    }
    if (!token || !verifyTotp(String(token), user.mfaSecret)) {
      return res.status(401).json({ message: 'Invalid MFA token' });
    }
    await storage.updateUserMfa(user.id, true, user.mfaSecret);
    res.json({ enabled: true });
  }));

  app.post('/api/mfa/disable', requireAuth, asyncHandler(async (req: Request, res: Response) => {
    const { token } = req.body;
    const user = await storage.getUser((req.user as any).id);
    if (!user || !user.mfaSecret) { // Should check if MFA is enabled rather than just secret exists
      return res.status(400).json({ message: 'MFA not enabled' });
    }
    if (!token || !verifyTotp(String(token), user.mfaSecret)) {
      return res.status(401).json({ message: 'Invalid MFA token' });
    }
    await storage.updateUserMfa(user.id, false, null); // Setting secret to null on disable
    res.json({ enabled: false });
  }));

  // Assignment endpoints
  app.get('/api/assignments', requireAuth, asyncHandler(async (req: Request, res: Response) => {
    const user = req.user as any;
    let assignments;

    if (user.role === 'student') {
      assignments = await storage.listAssignmentsForUser(user.id);

      // For each assignment, get the latest submission
      const assignmentsWithSubmissions = await Promise.all(
        assignments.map(async (assignment) => {
          const submission = await storage.getLatestSubmission(user.id, assignment.id);
          const course = await storage.getCourse(assignment.courseId);
          return {
            ...assignment,
            submissions: submission ? [submission] : [],
            course
          };
        })
      );

      res.json(assignmentsWithSubmissions);
    } else {
      // For instructors, return all assignments with submission counts
      assignments = await storage.listAssignments();

      const assignmentsWithStats = await Promise.all(
        assignments.map(async (assignment) => {
          const submissions = await storage.listSubmissionsForAssignment(assignment.id);
          const course = await storage.getCourse(assignment.courseId);
          const students = await storage.listCourseEnrollments(assignment.courseId);

          const submittedCount = new Set(submissions.map(s => s.userId)).size;

          return {
            ...assignment,
            submittedCount,
            totalStudents: students.length,
            submissionPercentage: students.length > 0 ? (submittedCount / students.length) * 100 : 0,
            course
          };
        })
      );

      res.json(assignmentsWithStats);
    }
  }));

  // Get specific assignment
  app.get('/api/assignments/:id', requireAuth, asyncHandler(async (req: Request, res: Response) => {
    const assignmentId = parseInt(req.params.id);
    const assignment = await storage.getAssignment(assignmentId);

    if (!assignment) {
      return res.status(404).json({ message: 'Assignment not found' });
    }

    const course = await storage.getCourse(assignment.courseId);

    res.json({
      ...assignment,
      course
    });
  }));

  // Create assignment (instructor only)
  app.post('/api/assignments', requireAuth, requireRole('instructor'), asyncHandler(async (req: Request, res: Response) => {
    try {
      const { title, description, courseId, dueDate, rubric } = req.body;

      console.log("Creating assignment with data:", JSON.stringify({
        title,
        description: description?.substring(0, 30) + "...",
        courseId,
        dueDate
      }));

      // Validate request
      const assignmentSchema = z.object({
        title: z.string().min(3),
        description: z.string().min(10),
        courseId: z.union([
          z.number().int().positive(),
          z.string().transform(val => parseInt(val))
        ]).optional(), // Make optional for standalone assignments
        dueDate: z.string().refine(val => !isNaN(Date.parse(val)), {
          message: 'Invalid date format'
        }),
        rubric: z.object({
          criteria: z.array(z.object({
            id: z.string(),
            type: z.string(),
            name: z.string(),
            description: z.string(),
            maxScore: z.number().int().min(1),
            weight: z.number().int().min(1),
          })).optional(),
          totalPoints: z.number().int().positive().optional(),
          passingThreshold: z.number().int().min(0).max(100).optional(),
        }).optional(),
      });

      const result = assignmentSchema.safeParse(req.body);
      if (!result.success) {
        const errorDetails = JSON.stringify(result.error.format());
        console.error("Assignment validation failed:", errorDetails);
        return res.status(400).json({
          message: 'Invalid assignment data',
          errors: result.error.format()
        });
      }

      // Check if course exists (if courseId is provided)
      if (courseId) {
        const courseIdNum = typeof courseId === 'string' ? parseInt(courseId) : courseId;
        const course = await storage.getCourse(courseIdNum);
        if (!course) {
          return res.status(404).json({ message: 'Course not found' });
        }
      }

      // Generate a unique shareable code
      const shareableCode = generateShareableCode();

      // Create assignment
      const courseIdNum = courseId ? (typeof courseId === 'string' ? parseInt(courseId) : courseId) : undefined;
      const assignment = await storage.createAssignment({
        title,
        description,
        courseId: courseIdNum,
        dueDate: new Date(dueDate),
        status: 'active',
        shareableCode,
        rubric: rubric ? JSON.stringify(rubric) as any : null,
      });

      console.log("Assignment created successfully, ID:", assignment.id);
      return res.status(201).json(assignment);
    } catch (error) {
      console.error("Error creating assignment:", error);
      return res.status(500).json({
        message: 'Failed to create assignment',
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }));

  // Get assignment details for instructor
  app.get('/api/assignments/:id/details', requireAuth, requireRole('instructor'), asyncHandler(async (req: Request, res: Response) => {
    const assignmentId = parseInt(req.params.id);
    let assignment;
    try {
      assignment = await storage.getAssignment(assignmentId);
    } catch (err) {
      console.error('Error retrieving assignment:', err);
      const assignments = await storage.listAssignments();
      assignment = assignments.find(a => a.id === assignmentId);

      if (!assignment) {
        return res.status(404).json({ message: 'Assignment not found' });
      }
    }

    if (!assignment) {
      return res.status(404).json({ message: 'Assignment not found' });
    }

    let course = null;
    let submissions: any[] = [];
    let students: any[] = [];

    try {
      course = await storage.getCourse(assignment.courseId);
    } catch (err) {
      console.error('Error fetching course:', err);
    }

    try {
      submissions = await storage.listSubmissionsForAssignment(assignment.id);
    } catch (err) {
      console.error('Error fetching submissions:', err);
    }

    try {
      students = await storage.listCourseEnrollments(assignment.courseId);
    } catch (err) {
      console.error('Error fetching students:', err);
    }

    const submittedCount = submissions.length > 0 ? new Set(submissions.map(s => s.userId)).size : 0;

    let shareableCode = assignment.shareableCode;
    if (!shareableCode && assignment.id) {
      shareableCode = generateShareableCode();
      try {
        await storage.updateAssignmentShareableCode(assignment.id, shareableCode);
      } catch (err) {
        console.error('Error updating assignment with shareable code:', err);
      }
    }

    res.json({
      ...assignment,
      course,
      submittedCount,
      totalStudents: students.length,
      submissionPercentage: students.length > 0 ? (submittedCount / students.length) * 100 : 0,
      shareableCode: shareableCode || 'temp-' + assignment.id
    });
  }));

  app.patch('/api/assignments/:id/status', requireAuth, requireRole('instructor'), asyncHandler(async (req: Request, res: Response) => {
    const assignmentId = parseInt(req.params.id);

    if (isNaN(assignmentId)) {
      return res.status(400).json({ message: 'Invalid assignment ID' });
    }

    const statusSchema = z.object({
      status: z.enum(['active', 'upcoming', 'completed'])
    });

    const result = statusSchema.safeParse(req.body);
    if (!result.success) {
      return res.status(400).json({ message: 'Invalid status value', errors: result.error });
    }

    const { status } = result.data;

    const assignment = await storage.getAssignment(assignmentId);
    if (!assignment) {
      return res.status(404).json({ message: 'Assignment not found' });
    }

