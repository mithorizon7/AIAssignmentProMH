# Continuous Integration Pipeline for AIGrader
# Runs on every push and pull request to ensure code quality and functionality

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Allow manual triggering of the workflow
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  # Job 1: Code Quality and Type Checking
  code-quality:
    name: Code Quality & Type Checking
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: TypeScript type checking
      run: npx tsc --noEmit
    
    - name: ESLint code linting
      run: |
        # Use the legacy config format for compatibility
        if [ -f "eslint.config.js" ]; then
          npx eslint . --max-warnings 0
        else
          npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0
        fi
    
    - name: Prettier formatting check
      run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"
    
    - name: Package vulnerability check
      run: npm audit --audit-level moderate

  # Job 2: Security Auditing
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level moderate || echo "Security vulnerabilities found but not blocking build"
        
        echo "Checking for known security patterns..."
        # Check for common security issues in code
        if command -v grep >/dev/null 2>&1; then
          echo "Scanning for potential security issues..."
          ! grep -r "eval(" --include="*.ts" --include="*.js" server/ client/ || echo "Warning: Found eval() usage"
          ! grep -r "innerHTML.*=" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" client/ || echo "Warning: Found innerHTML usage"
          ! grep -r "document.write" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" client/ || echo "Warning: Found document.write usage"
        fi
    
    - name: Check environment variable security
      run: |
        echo "Checking for hardcoded secrets..."
        # Look for potential hardcoded secrets (basic patterns)
        ! grep -r "password.*=" --include="*.ts" --include="*.js" server/ client/ | grep -v "passwordHash\|passwordField\|password:" || echo "Warning: Potential hardcoded password found"
        ! grep -r "secret.*=" --include="*.ts" --include="*.js" server/ client/ | grep -v "secretField\|secret:" || echo "Warning: Potential hardcoded secret found"

  # Job 3: Unit and Integration Testing
  testing:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_aigrader
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    env:
      # Test environment variables
      NODE_ENV: test
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_aigrader
      REDIS_URL: redis://localhost:6379
      SESSION_SECRET: test_session_secret_at_least_32_chars_long
      CSRF_SECRET: test_csrf_secret_at_least_32_chars_long
      GEMINI_API_KEY: test_key
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for PostgreSQL..."
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        
        echo "Waiting for Redis..."
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis to be ready..."
          sleep 2
        done
    
    - name: Run database migrations
      run: |
        # Run database setup/migrations if available
        if npm run db:push >/dev/null 2>&1; then
          npm run db:push
        elif npm run db:migrate >/dev/null 2>&1; then
          npm run db:migrate
        else
          echo "No database migration script found"
        fi
    
    - name: Run unit tests with coverage
      run: npx vitest run --coverage --reporter=verbose --reporter=junit --outputFile.junit=./test-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          ./test-results.xml
          ./coverage/
        retention-days: 30
    
    - name: Run integration tests
      run: npx vitest run --config test/integration/vitest.config.ts
    
    - name: Comment test coverage on PR
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request' && always()
      with:
        recreate: true
        path: coverage/coverage-summary.json

  # Job 4: Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Validate build size
      run: |
        echo "Checking build artifact sizes..."
        if [ -d "dist" ]; then
          find dist -type f -name "*.js" -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr
          
          # Check for oversized bundles (warning if any file > 1MB)
          if find dist -type f -name "*.js" -size +1M | grep -q .; then
            echo "⚠️ Warning: Large bundle files detected (>1MB)"
            find dist -type f -name "*.js" -size +1M -exec ls -lh {} \;
          else
            echo "✅ All bundle sizes are reasonable"
          fi
        fi
    
    - name: Validate build artifacts
      run: |
        echo "Checking for build artifacts..."
        if [ -d "dist" ]; then
          echo "Build directory 'dist' found"
          ls -la dist/
        else
          echo "No 'dist' directory found, checking for other build outputs..."
          find . -name "*.js" -path "./server/*" | head -5
        fi

  # Job 5: Performance and Load Testing
  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [testing, build-validation]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_aigrader
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_aigrader
      REDIS_URL: redis://localhost:6379
      SESSION_SECRET: test_session_secret_at_least_32_chars_long
      CSRF_SECRET: test_csrf_secret_at_least_32_chars_long
      GEMINI_API_KEY: test_key
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: |
        echo "Running performance validation..."
        if [ -f "scripts/comprehensive-load-test.js" ]; then
          echo "Running comprehensive load test..."
          timeout 300 node scripts/comprehensive-load-test.js || echo "Load test completed or timed out"
        else
          echo "No load test script found, running basic performance validation"
        fi
    
    - name: Run horizontal scaling tests
      run: |
        echo "Running horizontal scaling validation..."
        if [ -f "scripts/horizontal-scaling-test.js" ]; then
          node scripts/horizontal-scaling-test.js
        else
          echo "No horizontal scaling test found"
        fi

  # Job 6: Docker Build Validation
  docker-validation:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: [build-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        if [ -f "Dockerfile" ]; then
          echo "Building Docker image..."
          docker build -t aigrader-test .
          echo "Docker build successful"
          
          echo "Validating Docker image..."
          docker run --rm aigrader-test node --version
          
          echo "Docker validation completed"
        else
          echo "No Dockerfile found, skipping Docker validation"
        fi
    
    - name: Validate docker-compose configuration
      run: |
        if [ -f "docker-compose.yml" ]; then
          echo "Validating docker-compose configuration..."
          docker-compose config
          echo "docker-compose configuration valid"
        else
          echo "No docker-compose.yml found"
        fi

  # Job 7: Deployment Readiness Check
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [performance-testing, docker-validation]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run deployment readiness validation
      run: |
        echo "Checking deployment readiness..."
        
        # Check for required environment variable documentation
        if [ -f ".env.example" ]; then
          echo "✅ Environment variable documentation found"
        else
          echo "⚠️ No .env.example found"
        fi
        
        # Check for production configuration
        if [ -f "ecosystem.config.js" ]; then
          echo "✅ PM2 configuration found"
        else
          echo "⚠️ No PM2 configuration found"
        fi
        
        # Check for database migration scripts
        if npm run db:push >/dev/null 2>&1 || npm run db:migrate >/dev/null 2>&1; then
          echo "✅ Database migration scripts available"
        else
          echo "⚠️ No database migration scripts found"
        fi
        
        # Run final validation script if available
        if [ -f "scripts/final-scaling-validation.js" ]; then
          echo "Running final scaling validation..."
          node scripts/final-scaling-validation.js
        fi
        
        echo "Deployment readiness check completed"

  # Summary Job
  ci-summary:
    name: CI Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit, testing, build-validation, performance-testing, docker-validation, deployment-readiness]
    if: always()
    
    steps:
    - name: CI Pipeline Summary
      run: |
        echo "CI Pipeline Summary:"
        echo "==================="
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Testing: ${{ needs.testing.result }}"
        echo "Build Validation: ${{ needs.build-validation.result }}"
        echo "Performance Testing: ${{ needs.performance-testing.result }}"
        echo "Docker Validation: ${{ needs.docker-validation.result }}"
        echo "Deployment Readiness: ${{ needs.deployment-readiness.result }}"
        
        # Check if any critical jobs failed
        if [[ "${{ needs.code-quality.result }}" == "failure" || 
              "${{ needs.security-audit.result }}" == "failure" || 
              "${{ needs.testing.result }}" == "failure" || 
              "${{ needs.build-validation.result }}" == "failure" ]]; then
          echo "❌ Critical CI jobs failed - blocking deployment"
          exit 1
        else
          echo "✅ CI Pipeline completed successfully"
        fi