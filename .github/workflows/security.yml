# Security Scanning and Compliance Pipeline
# Runs comprehensive security checks on the codebase

name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level=moderate --production || echo "Vulnerabilities found - review required"
        
        # Generate detailed audit report
        npm audit --json > audit-report.json || true
        
        # Check for high/critical vulnerabilities
        HIGH_VULNS=$(npm audit --audit-level=high --production --dry-run 2>/dev/null | grep -c "vulnerabilities" || echo "0")
        if [ "$HIGH_VULNS" -gt 0 ]; then
          echo "❌ High/Critical vulnerabilities found"
          npm audit --audit-level=high --production
        else
          echo "✅ No high/critical vulnerabilities found"
        fi
    
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: audit-report
        path: audit-report.json
        retention-days: 30

  # Job 2: Static code security analysis
  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Security linting with ESLint security plugin
      run: |
        echo "Installing ESLint security plugin..."
        npm install --no-save eslint-plugin-security
        
        echo "Running security linting..."
        npx eslint --no-eslintrc \
          --config '{"extends": ["plugin:security/recommended"], "plugins": ["security"], "parserOptions": {"ecmaVersion": 2022, "sourceType": "module"}}' \
          --ext .js,.ts \
          server/ || echo "Security linting completed with warnings"
    
    - name: Check for common security patterns
      run: |
        echo "Scanning for security anti-patterns..."
        
        # Check for eval usage
        if grep -r "eval(" --include="*.ts" --include="*.js" server/ client/; then
          echo "❌ Found eval() usage - security risk"
          exit 1
        fi
        
        # Check for innerHTML usage
        if grep -r "\.innerHTML\s*=" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" client/; then
          echo "⚠️ Found innerHTML usage - potential XSS risk"
        fi
        
        # Check for document.write usage
        if grep -r "document\.write" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" client/; then
          echo "⚠️ Found document.write usage - potential XSS risk"
        fi
        
        # Check for SQL concatenation patterns
        if grep -r "SELECT.*+\|INSERT.*+\|UPDATE.*+\|DELETE.*+" --include="*.ts" --include="*.js" server/; then
          echo "⚠️ Potential SQL injection risk - use parameterized queries"
        fi
        
        echo "✅ Security pattern scan completed"
    
    - name: Check for hardcoded secrets
      run: |
        echo "Scanning for potential hardcoded secrets..."
        
        # Check for common secret patterns
        SECRET_PATTERNS=(
          "password\s*=\s*['\"][^'\"]{8,}"
          "secret\s*=\s*['\"][^'\"]{16,}"
          "api[_-]?key\s*=\s*['\"][^'\"]{16,}"
          "token\s*=\s*['\"][^'\"]{16,}"
          "jwt[_-]?secret\s*=\s*['\"][^'\"]{16,}"
        )
        
        SECRETS_FOUND=false
        for pattern in "${SECRET_PATTERNS[@]}"; do
          if grep -rE "$pattern" --include="*.ts" --include="*.js" --exclude-dir=node_modules .; then
            echo "⚠️ Potential hardcoded secret found"
            SECRETS_FOUND=true
          fi
        done
        
        if [ "$SECRETS_FOUND" = true ]; then
          echo "❌ Potential hardcoded secrets detected - review required"
          echo "Ensure all secrets are stored in environment variables"
        else
          echo "✅ No hardcoded secrets detected"
        fi

  # Job 3: Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for scanning
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t aigrader-security-scan .
        else
          echo "No Dockerfile found, skipping container security scan"
          exit 0
        fi
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      if: hashFiles('Dockerfile') != ''
      with:
        image-ref: 'aigrader-security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: hashFiles('Dockerfile') != '' && always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Secrets scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better secret detection
    
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Job 5: License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check license compliance
      run: |
        echo "Checking license compliance..."
        
        # Install license checker
        npm install --no-save license-checker
        
        # Generate license report
        npx license-checker --onlyAllow "MIT;BSD;ISC;Apache-2.0;Apache;Unlicense;WTFPL;CC0-1.0" --production --csv > licenses.csv || echo "License check completed with warnings"
        
        # Check for GPL licenses (which might require special handling)
        if npx license-checker --production | grep -i "gpl"; then
          echo "⚠️ GPL licenses detected - review required for compliance"
        else
          echo "✅ No problematic licenses detected"
        fi
        
        echo "License report generated"
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.csv
        retention-days: 30

  # Job 6: OWASP ZAP security scan (for running application)
  dynamic-security-scan:
    name: Dynamic Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_aigrader
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies and start application
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_aigrader
        REDIS_URL: redis://localhost:6379
        SESSION_SECRET: test_session_secret_at_least_32_chars_long
        CSRF_SECRET: test_csrf_secret_at_least_32_chars_long
        GEMINI_API_KEY: test_key
      run: |
        npm ci
        
        # Start the application in background
        npm run dev &
        APP_PID=$!
        
        # Wait for application to start
        echo "Waiting for application to start..."
        sleep 30
        
        # Check if application is running
        if curl -f http://localhost:5000/api/health; then
          echo "Application started successfully"
        else
          echo "Application failed to start"
          kill $APP_PID 2>/dev/null || true
          exit 1
        fi
        
        # Save PID for cleanup
        echo $APP_PID > app.pid
    
    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.14.0
      with:
        target: 'http://localhost:5000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Cleanup application
      if: always()
      run: |
        if [ -f "app.pid" ]; then
          kill $(cat app.pid) 2>/dev/null || true
        fi

  # Job 7: Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, container-security, secrets-scan, license-check]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "Security Scan Summary:"
        echo "====================="
        echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "Static Analysis: ${{ needs.static-analysis.result }}"
        echo "Container Security: ${{ needs.container-security.result }}"
        echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
        echo "License Check: ${{ needs.license-check.result }}"
        
        # Check for critical failures
        if [[ "${{ needs.dependency-scan.result }}" == "failure" || 
              "${{ needs.static-analysis.result }}" == "failure" || 
              "${{ needs.secrets-scan.result }}" == "failure" ]]; then
          echo "❌ Critical security issues detected"
          echo "Review scan results and address issues before deployment"
          exit 1
        else
          echo "✅ Security scans completed - review any warnings"
        fi