# Docker Compose for Horizontal Scaling Testing
# This configuration allows testing multiple instances with load balancing

version: '3.8'

services:
  # Load Balancer (nginx)
  load-balancer:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app-1
      - app-2
      - app-3
    networks:
      - aigrader-network
    restart: unless-stopped

  # Application Instance 1
  app-1:
    build: .
    environment:
      - NODE_ENV=production
      - PORT=5000
      - INSTANCE_ID=1
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./logs:/app/logs
    networks:
      - aigrader-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Application Instance 2
  app-2:
    build: .
    environment:
      - NODE_ENV=production
      - PORT=5000
      - INSTANCE_ID=2
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./logs:/app/logs
    networks:
      - aigrader-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Application Instance 3
  app-3:
    build: .
    environment:
      - NODE_ENV=production
      - PORT=5000
      - INSTANCE_ID=3
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./logs:/app/logs
    networks:
      - aigrader-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (for local testing)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=aigrader
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - aigrader-network
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for sessions and queues
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - aigrader-network
    restart: unless-stopped
    ports:
      - "6379:6379"

  # Monitoring (optional)
  monitoring:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - aigrader-network
    restart: unless-stopped

networks:
  aigrader-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: