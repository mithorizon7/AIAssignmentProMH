AI developer, let's reset. The previous debugging attempts were complicated by a core misunderstanding of the problem. Read this summary carefully, then execute the required actions.

The Problem We Were Facing

The connection timeouts and localhost errors were not because BullMQ is incompatible with Upstash or because a complex "REST API adapter" was needed.

The true root cause was simple: the ioredis client, which BullMQ uses, was not being configured with the mandatory TLS security settings required to connect to a secure cloud database like Upstash. This was happening because multiple parts of the application were creating their own misconfigured Redis clients.

Current Status: The Environment is Now Correct

The environment secrets have been updated. The REDIS_URL secret now contains the correct, full Redis Protocol URL (starting with rediss://) provided by Upstash. The application now has the correct credentials to connect successfully if the code is correct.

Your task is to fix the code to use these new credentials properly and restore the application's intended architecture.

Required Actions: Perform these steps in order.

Step 1: Implement the Centralized Redis Client

Target File: AIAssignmentProMH/server/queue/redis.ts.

Action: Rewrite this file to create a single, centralized ioredis client. This client must use the process.env.REDIS_URL and include the { tls: {} } option for the secure Upstash connection. Remove all fallback logic that attempts to connect to localhost.

Your implementation in AIAssignmentProMH/server/queue/redis.ts should be:

TypeScript
import IORedis from 'ioredis';

// This must be the only Redis client instance created in the entire application.
const redisClient = new IORedis(process.env.REDIS_URL, {
    tls: {}, // Mandatory for Upstash
    maxRetriesPerRequest: null // BullMQ best practice
});

redisClient.on('error', (err) => {
    console.error('Central Redis Client Error:', err);
});

export default redisClient;
 Step 2: Consolidate All Other Redis Usage

Action: Search the entire codebase for any other instances of new Redis() or new IORedis().
Refactor: Modify every file found (especially AIAssignmentProMH/server/queue/bullmq-submission-queue.ts and AIAssignmentProMH/server/utils/gemini-file-handler.ts) to import and use the single redisClient you created in Step 1. They must not create their own clients.
Step 3: Restore the BullMQ Job Queue

Action: You must now undo the "direct submission processing" workaround and fully re-enable the BullMQ system.
Find and Re-enable: Locate where the queue system was disabled (likely in AIAssignmentProMH/server/routes.ts or AIAssignmentProMH/server/index.ts) and re-enable the necessary imports and route handlers.
Configure BullMQ: Ensure the BullMQ Queue and Worker instances are initialized using the imported redisClient for their connection options.
Step 4: Fix the SQL Migration Error

Target File: AIAssignmentProMH/server/migrations/add-lms-tables.ts.
Action: Fix the known SQL error in this file. Refactor the code to use a separate db.execute() call for the CREATE TABLE statement and for each individual CREATE INDEX statement.
Definition of Done

This task is complete when the application restarts (npm run dev) and runs successfully with zero Redis or SQL errors in the logs. The console should show a single, successful connection to Upstash Redis, and the BullMQ background job processing functionality should be fully restored and operational.