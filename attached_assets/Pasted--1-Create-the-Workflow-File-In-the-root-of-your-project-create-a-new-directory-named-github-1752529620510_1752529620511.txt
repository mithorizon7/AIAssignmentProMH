## 1. Create the Workflow File üìÇ

In the root of your project, create a new directory named .github. Inside that directory, create another directory named workflows. Finally, inside the workflows directory, create a new file named ci.yml.

The final path should look like this: .github/workflows/ci.yml

## 2. Add the Workflow Configuration ‚öôÔ∏è

Copy and paste the following code into your new ci.yml file. This configuration tells GitHub Actions exactly what to do.

YAML
# A descriptive name for your workflow
name: CI Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the "main" branch
  push:
    branches: [ "main" ]
  # Triggers the workflow on pull request events for the "main" branch
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Sets up a specific version of Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Use a version that matches your project
          cache: 'npm' # Caches npm dependencies for faster builds

      # Step 3: Installs project dependencies. 'npm ci' is recommended for CI for faster, reliable installs.
      - name: Install dependencies
        run: npm ci

      # Step 4: Runs the linter
      - name: Run linter
        run: npm run lint

      # Step 5: Runs the TypeScript type checker
      - name: Run type check
        run: npm run typecheck

      # Step 6: Runs the tests
      - name: Run tests
        run: npm run test
## 3. Commit and Push Your Changes ‚úÖ

Commit the new .github/workflows/ci.yml file and push it to your repository on GitHub.

Bash
git add .github/workflows/ci.yml
git commit -m "feat: Add CI workflow for automated checks"
git push
That's it! Your CI pipeline is now active. You can view the status of your workflow runs by going to the Actions tab in your GitHub repository. From now on, every time you or a team member creates a pull request or pushes code to the main branch, these checks will run automatically, preventing broken code from being merged.

## Extending the Workflow (Optional)

As the recommendation noted, you can easily add more steps. For example, to add a security audit, you would add another step to the ci.yml file:

YAML
      # ... after the test step

      # Step 7: Runs a security audit
      - name: Run security audit
        run: npm audit --audit-level=high