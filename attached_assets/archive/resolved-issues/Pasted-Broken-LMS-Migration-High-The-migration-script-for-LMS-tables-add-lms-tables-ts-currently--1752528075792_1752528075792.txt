Broken LMS Migration (High ⚠️): The migration script for “LMS tables” (add-lms-tables.ts) currently contains SQL syntax that causes errors, leading the team to comment out its execution entirely. This means any database changes for LMS integration (likely tables for syncing with an LMS or similar) are not applied, and the code related to those tables can’t run. This is clear technical debt (the code even has a // TODO: fix SQL syntax note). Recommendation: Fix the SQL migration bug and run the migrations on the database. Specifically, it was noted that the CREATE TABLE and CREATE INDEX statements should be separated into individual db.execute() calls to avoid SQL parsing issues. After correcting the migration script, re-enable it in the migration runner and verify that all new tables and indexes are created correctly in the DB.

BullMQ Queue Disabled (High ⚠️): As mentioned, the background job queue was turned off as a temporary measure to avoid Redis errors. This is a significant functionality bug – the application isn’t executing asynchronous grading jobs as designed. Recommendation: Remove the flag/conditional that disabled the queue (likely an environment check or commented code in server/index.ts or server/routes.ts as per notes). With the new single Redis client in place, the queue should no longer cause timeouts. Test thoroughly: start the app with ENABLE_REDIS=true (and NODE_ENV=production if needed) so that BullMQ is active, then simulate submissions to ensure jobs get queued and processed without error. This fix closes a large functional gap.

Redis Connection Bug (High ⚠️): Prior to fixes, the app had Redis connection timeouts and errors, caused by using improper connection settings (missing TLS) and multiple client instances. This was essentially a bug in configuration/initialization. Status: The resolution is underway: using the Upstash REDIS_URL with TLS in one place Recommendation: Double-check the Redis connection logic after refactor. Ensure that the REDIS_URL(with rediss://...) is indeed being used and that no code path still tries to connect to localhost or using old config variables. Also, handle Redis connection errors gracefully (log them, and perhaps retry or alert) so that a transient Redis outage doesn’t crash the app. This will solidify the messaging queue and caching layers.

Schema vs Code Discrepancies (High ⚠️): The missing schema definitions for certain tables and fields (discussed in Code Quality) can be considered bugs as well – if any part of the app tries to use those tables, it will fail at runtime. For example, if the application attempts to query UserNotificationSetting or update a user’s emailVerified status, it will throw due to the schema omission Recommendation: (Same as earlier) add those definitions and run a fresh migration or schema sync to incorporate them. Until fixed, these represent latent bugs – code that will throw exceptions when exercised.
