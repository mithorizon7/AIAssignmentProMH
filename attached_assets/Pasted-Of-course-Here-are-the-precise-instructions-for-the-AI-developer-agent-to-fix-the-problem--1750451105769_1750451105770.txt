Of course. Here are the precise instructions for the AI developer agent to fix the problem.

-----

AI developer, your current approach to connecting to Redis is incorrect. You must abandon the REST API connection method. Your goal is to reconfigure the application to use the standard Redis Protocol endpoint provided by Upstash with the correct security settings.

Follow these instructions exactly.

### **Objective**

Fix the Redis connection timeouts by correctly configuring the `ioredis` client to connect to the Upstash Redis Protocol endpoint using TLS. Consolidate all Redis connections to use this single, correctly configured client.

### **Required Actions**

1.  **Focus on the Central Client File:** All your changes should be centered around the file: `AIAssignmentProMH/server/queue/redis.ts`. This file must be the *only* place in the application where a Redis client is instantiated.

2.  **Implement the Correct `ioredis` Configuration:** Modify `AIAssignmentProMH/server/queue/redis.ts` to create a single `ioredis` client instance. This client **must** be configured to use the full `REDIS_URL` from the environment secrets and **must** include the `tls: {}` option.

    Your implementation in `AIAssignmentProMH/server/queue/redis.ts` should look like this:

    ```typescript
    import IORedis from 'ioredis';

    // This should be the only place a Redis client is created.
    // It must use the full REDIS_URL from the environment secrets, which
    // starts with "rediss://" and contains the password.
    const redisClient = new IORedis(process.env.REDIS_URL, {
        // The tls object is mandatory for connecting to Upstash.
        tls: {},
        // This is a best practice for BullMQ compatibility.
        maxRetriesPerRequest: null
    });

    // Handle connection errors for logging.
    redisClient.on('error', (err) => {
        console.error('Redis Client Error', err);
    });

    // Export the single, correctly configured client for the rest of the app to use.
    export default redisClient;
    ```

3.  **Eliminate All Other Redis Clients:** Search the codebase for any other instances of `new Redis()` or `new IORedis()`.

      * Any other files that need a Redis connection (such as `AIAssignmentProMH/server/queue/bullmq-submission-queue.ts` and `AIAssignmentProMH/server/utils/gemini-file-handler.ts`) must **import** the single `redisClient` from `AIAssignmentProMH/server/queue/redis.ts`.
      * They must **not** create their own client. The BullMQ `Queue` and `Worker` should be passed the imported client in their connection options.

4.  **Re-enable the BullMQ Queue System:** Ensure that the BullMQ queue system, which was previously disabled for debugging, is fully re-enabled and configured to use the imported `redisClient`.

### **Definition of Done**

This task is complete when the application starts and runs successfully with **zero Redis connection errors**, and the BullMQ background job queue is fully operational and connected to Upstash.